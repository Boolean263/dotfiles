#!/usr/bin/env perl

use 5.020;
use strict;
use warnings;
use warnings qw(FATAL utf8);    # unicode-based boilerplate comes from
use open IO => ':locale';       # https://stackoverflow.com/questions/6162484
use charnames qw(:full :short);
use feature 'unicode_strings';
use feature 'fc'; # fold case
use utf8;
use autodie qw(:all);

use Getopt::Long qw(:config
    no_ignore_case no_auto_abbrev pass_through bundling);
BEGIN { $Pod::Usage::Formatter = 'Pod::Text::Termcap' if -t STDOUT; }
use Pod::Usage;
use Encode qw(encode decode);
use Encode::Locale;
use Unicode::Normalize qw(NFD NFC NFKD NFKC);

use Safe;

END { close STDOUT }

###
### Functions
###

###
### Main Program
###

# Decode @ARGV if needed (again from the SO question above)
@ARGV = map { decode(locale => $_, Encode::FB_CROAK) } @ARGV;

my $verbose;
my $dryrun;

# Get the options we recognize, leaving others in @ARGV
GetOptions(
    "verbose|v"         => \$verbose,
    "dry-run|d"         => \$dryrun,
    "help|h|?"          => sub { pod2usage(-verbose => 1) },
    "man"               => sub { pod2usage(-verbose => 2) },
) or pod2usage("Use '--help' or '--man' for more information.");

my $op = shift or pod2usage("No expression given");
my $safe = Safe->new();
$safe->permit_only(qw(
    :default
    :base_io
    :base_math
    :filesys_read
    :filesys_write
));
$safe->share_from('Unicode::Normalize', [qw(NFC NFD NFKC NFKD)]);

for (@ARGV) {
    my $was = $_;
    my $rv = $safe->reval($op);
    die $@ if $@;
    if ($verbose) {
        print("‘$was’ → ‘$_’");
        if (! $_) {
            print(" [skipping]\n");
        }
        elsif ($_ eq $was) {
            print(" [no change]\n");
        }
        elsif ($dryrun) {
            print(" [dry run]\n");
        }
        else {
            rename($was, $_);
        }
    } else {
        rename($was, $_) if($_ && $_ ne $was && !$dryrun);
    }
}

__END__

=encoding UTF-8

=head1 NAME

prename - Rename files according to a perl expression

=head1 SYNOPSIS

=over 12

=item B<prename.pl>

C<[-v]> C<[-d]> C<[-h]>
I<C<expr>>
I<file [file ...]>

=back

=head1 OPTIONS

=over 20

=item I<C<expr>>

Perl expression to evaluate. C<$_> will be used as the new file name.

=item I<file [file ...]>

Files to rename.

=item B<-v>, B<--verbose>

Prints the old and new names of files as they are being renamed.

=item B<-d>, B<--dry-run>

Don't actually rename files. Useful with C<-v>.

=item B<-h>, B<-?>, B<--help>

Prints a brief help message.

=item B<--man>

Shows the complete man page for this script.

=back

=head1 DESCRIPTION

Renames files based on the perl expression you give.

=head1 EXAMPLES

    rename 's/\.orig$//' *.orig

    rename 'tr/A-Z/a-z/ unless /^Make/' * 

    rename '$_ .= ".bad"' *.f 

    rename 'print "$_: "; s/foo/bar/ if <STDIN> =~ /^y/i' * 

    find /tmp -name '*~' -print | xargs rename ...

=head1 SEE ALSO

L<perl>

L<https://www.oreilly.com/library/view/perl-cookbook/1565922433/ch09s10.html>

=head1 AUTHOR

David Perry, <d.perry@utoronto.ca>

=begin comment

Editor modelines - http://www.wireshark.org/tools/modelines.html

Local variables:
c-basic-offset: 4
tab-width: 4
indent-tabs-mode: nil
coding: utf-8
End:

vi:set shiftwidth=4 tabstop=4 expandtab fileencoding=utf-8:
:indentSize=4:tabSize=4:noTabs=true:coding=utf-8:
