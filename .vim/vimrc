" vim:set fileencoding=utf-8:
set nocompatible
" The next line fails in Windows
silent! language en_US.UTF-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,latin1
autocmd BufEnter * if &fileencoding == "" && &modifiable == 1 | set fileencoding=utf-8 nomodified | endif

" Some plugins need to be configured before they're actually loaded
let g:tagbar_type_diff = {
    \'ctagstype':'diff',
    \'kinds': [ 'f:filename' ],
    \'sort':0
\}
let g:tagbar_type_make = {
    \'kinds':[
        \ 'm:macros',
        \ 't:targets'
    \]
\}

let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" vim-plug (https://github.com/junegunn/vim-plug) settings
" Automatically install vim-plug and run PlugInstall if vim-plug not found
if empty(glob('~/.vim/autoload/plug.vim')) && &shell =~ 'sh$'
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" Variables to configure plugins are usually only read when the plugins
" are loaded, so they need to be defined first
let skeletons#autoRegister = 1

nnoremap <F8> :TagbarToggle<CR>

" *** For vim-plug
" use silent! to suppress warning messages about missing git in Windows
silent! call plug#begin('~/.vim/bundle')
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'pgilad/vim-skeletons' | Plug 'SirVer/ultisnips'
Plug 'craigemery/vim-autotag'
Plug 'wellle/targets.vim'
Plug 'rhysd/clever-f.vim'
Plug 'majutsushi/tagbar'
Plug 'VinyLimaZ/tmux.vim'
Plug 'wincent/terminus'
Plug 'airblade/vim-gitgutter'
let g:clever_f_across_no_line = 1
let g:clever_f_timeout_ms = 3000
call plug#end()

" *** For vim-pathogen
"let s:vimdir=strpart(&runtimepath, 0, stridx(&runtimepath,","))
"execute "source ".s:vimdir."/bundle/vim-pathogen/autoload/pathogen.vim"
"runtime bundle/vim-pathogen/autoload/pathogen.vim
"execute pathogen#infect()
"call pathogen#runtime_append_all_bundles()


syntax on
set synmaxcol=200

"let mapleader="\\"
let mapleader=" "
nnoremap <Leader>h :noh<CR>
nnoremap <Leader>c /^\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>

set backspace=indent,eol,start
set autoindent
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4
set hlsearch

set scrolloff=8

set autoread

" Set the directory for saving swap files and undo history
if has('win32') || has('win64')
    set directory=e:/temp/vim//
else
    set directory=/var/tmp/daperry/vim//
endif
execute "set undodir=" . &directory
set undofile
silent! call mkdir(&directory, "p", 0700)

" Highlight the current line and column, and column 80
" The colours for these are set below
set cursorline cursorcolumn colorcolumn=80
autocmd WinLeave * set nocursorline nocursorcolumn
autocmd WinEnter * set cursorline cursorcolumn

set pastetoggle=<F9>

" Since most of us have Ctrl-S hardwired into our b rains
nnoremap <C-S> :w<CR>
inoremap <C-S> <C-O>:w<CR>

" Set Ctrl-Backspace to delete word (gui)
inoremap <C-BS> <C-W>
cnoremap <C-BS> <C-W>

" Set Ctrl-Backspace to delete word (cygterm, terminals I can
" explicitly map it to \x1f in like konsole)
inoremap <C-_> <C-W>
cnoremap <C-_> <C-W>

" Allow Ctrl-W to be something else
inoremap <C-W> <Nop>
cnoremap <C-W> <Nop>

" Use Shift-Insert to paste the clipboard at the current location
inoremap <S-Insert> <C-O>:set paste<CR><C-R>*<C-O>:set nopaste<CR>
cnoremap <S-Insert> <C-R>*

" Don't let 'x' wipe out the delete register
nnoremap x "_x

set number
"set relativenumber
"set numberwidth=2

set list
set listchars=tab:>-,trail:-,extends:>
set listchars=tab:␉·,trail:·,extends:>

if (&term == 'xterm' || &term =~? '^screen')
    set t_Co=256
endif

"set background=dark
"colorscheme desert256
"colorscheme asu1dark
"colorscheme solarized
"colorscheme apprentice
"colorscheme base16-eighties
colorscheme koehler

" Set colour customizations *after* setting colorscheme
"highlight CursorLine   term=none cterm=none ctermbg=238 guibg=#222222
highlight CursorLine NONE
highlight CursorColumn term=none cterm=none ctermbg=238 guibg=#222222
highlight ColorColumn  term=none cterm=none ctermbg=235 guibg=#0F0F0F
highlight LineNr       term=underline cterm=none ctermfg=3 ctermbg=0 guifg=Yellow guibg=Black
highlight CursorLineNr term=inverse cterm=none ctermfg=0 ctermbg=11 guifg=#000000 guibg=#FFFF00
" CursorLineNr applies to the current line number only if relativenumber
" is set, or if number AND cursorline are both set. cursorline and
" relativenumber both slow vim down. Hopefully, "highlight CursorLine NONE"
" mitigates that somewhat.

highlight DiffDelete   term=none cterm=none ctermfg=0 ctermbg=52 guifg=black guibg=#5F0000
highlight DiffAdd      term=none cterm=none ctermbg=22 guibg=#005F00
highlight DiffChange   term=none cterm=none ctermbg=17 guibg=#00005F
highlight DiffText     term=underline cterm=underline ctermbg=20 guibg=#0000D7

" Buffer management
set hidden " lets you switch away from unsaved buffers
" List buffers and let you choose one
nnoremap <leader>b :ls<cr>:b<space>
nnoremap [b :bprev<cr>
nnoremap ]b :bnext<cr>

" See also Plug 'craigemery/vim-autotag'
nnoremap [t :tprev<cr>
nnoremap ]t :tnext<cr>

" Seen this suggested a few places
set wildmenu wildmode=full

" Move through virtual lines if not moving with a count
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" This lets us write plugins in perl, but really slows down vim's startup
"let home=expand('~')
"let $PERL5LIB=home."/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:".home."/perl5/lib/perl5"
"perl use Vim::X;
"perl Vim::X::source_function_dir("~/.vim/perl");

" http://vim.wikia.com/wiki/Setting_file_attributes_without_reloading_a_buffer
function! SetExecutableBit()
    if &shell =~ 'sh$'
        let fname = expand("%:p")
        checktime
        if ! &autoread
            execute "au FileChangedShell " . fname . " :echo"
        endif
        silent !chmod a+x %
        checktime
        if ! &autoread
            execute "au! FileChangedShell " . fname
        endif
    endif
endfunction
command! Xbit call SetExecutableBit()

augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
augroup END

function! UndoCPSave()
    let b:undo_cp = undotree().seq_cur
endfunction
function! UndoCPRestore()
    if exists('b:undo_cp')
        let l:undo_cp = undotree().seq_cur
        execute "".b:undo_cp."undo"
        let b:undo_cp = l:undo_cp
    else
        echohl ErrorMsg
        echo "No saved undo spot"
        echohl None
    endif
endfunction
nnoremap <leader>U :call UndoCPSave()<CR>
nnoremap <leader>u :call UndoCPRestore()<CR>
au! BufReadPost * if &modifiable | call UndoCPSave() | endif
