" vim:set fileencoding=utf-8:
set nocompatible
let $VIMHOME=expand('<sfile>:p:h')
" The next line fails in Windows
silent! language en_US.UTF-8
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,latin1
autocmd BufEnter * if &fileencoding == "" && &modifiable == 1 | set fileencoding=utf-8 nomodified | endif

" Some plugins need to be configured before they're actually loaded
let g:tagbar_type_diff = {
    \'ctagstype':'diff',
    \'kinds': [ 'f:filename' ],
    \'sort':0
\}
let g:tagbar_type_make = {
    \'kinds':[
        \ 'm:macros',
        \ 't:targets'
    \]
\}

let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" vim-plug (https://github.com/junegunn/vim-plug) settings
" Automatically install vim-plug and run PlugInstall if vim-plug not found
if empty(glob('$VIMHOME/autoload/plug.vim')) && &shell =~ 'sh$'
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

" Variables to configure plugins are usually only read when the plugins
" are loaded, so they need to be defined first
let skeletons#autoRegister = 1

nnoremap <F8> :TagbarToggle<CR>

" *** For vim-plug
" use silent! to suppress warning messages about missing git in Windows
silent! call plug#begin('$VIMHOME/bundle')
Plug 'tpope/vim-characterize'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-unimpaired'
Plug 'pgilad/vim-skeletons' | Plug 'SirVer/ultisnips'
"Plug 'ludovicchabant/vim-gutentags'
Plug 'wellle/targets.vim'
Plug 'rhysd/clever-f.vim'
Plug 'majutsushi/tagbar'
Plug 'VinyLimaZ/tmux.vim'
Plug 'wincent/terminus'
Plug 'airblade/vim-gitgutter'
let g:clever_f_across_no_line = 1
let g:clever_f_timeout_ms = 3000
call plug#end()

" *** For vim-pathogen
"let s:vimdir=strpart(&runtimepath, 0, stridx(&runtimepath,","))
"execute "source ".s:vimdir."/bundle/vim-pathogen/autoload/pathogen.vim"
"runtime bundle/vim-pathogen/autoload/pathogen.vim
"execute pathogen#infect()
"call pathogen#runtime_append_all_bundles()


syntax on
set synmaxcol=200

"let mapleader="\\"
let mapleader=" "
nnoremap <Leader>/ :noh<CR>
nnoremap <Leader>c /^\(<<<<<<<\\|=======\\|>>>>>>>\)<CR>

set backspace=indent,eol,start      " backspace across lines, etc.
set autoindent                      " keep indent level of previous lines
set expandtab                       " expand tabs to spaces
set tabstop=4                       " tab characters stop every n columns
set shiftwidth=4                    " indent/dedent by n columns
set softtabstop=4                   " tab stops are every n columns
set hlsearch                        " hilight search terms

set scrolloff=4                     " number of lines to keep visible at top/bottom of screen

set updatetime=500                  " save swap and update CursorHold
set autoread                        " automatically reload the file if it's changed outside of vim and not inside

set display=lastline                " don't show partial lines as @'s

if version > 742
    set signcolumn=yes              " always show sign column
else
    let g:gitgutter_sign_column_always=1
endif

" My default seems to be croql; 'help fo-table' says the default is tcq
set formatoptions=                  " clear it out
set formatoptions+=t                " auto-wrap text on textwidth
set formatoptions+=c                " auto-wrap comments on textwidth
set formatoptions+=r                " auto-insert comment leader for Enter
set formatoptions+=o                " auto-insert comment leader for o/O
set formatoptions+=j                " remove comment leader when joining
set formatoptions+=q                " let 'gq' format comments

" https://vimways.org/2018/formatting-lists-with-vim/
set formatoptions+=n                " format 'numbered' lists based on formatlistpat
set formatlistpat=^\\s*                 " Optional leading whitespace
set formatlistpat+=[                    " Start character class
set formatlistpat+=\\[({]\\?            " |  Optionally match opening punctuation
set formatlistpat+=\\(                  " |  Start group
set formatlistpat+=[0-9]\\+             " |  |  Numbers
set formatlistpat+=\\\|                 " |  |  or
set formatlistpat+=[a-zA-Z]\\+          " |  |  Letters
set formatlistpat+=\\)                  " |  End group
set formatlistpat+=[\\]:.)}             " |  Closing punctuation
set formatlistpat+=]                    " End character class
set formatlistpat+=\\s\\+               " One or more spaces
set formatlistpat+=\\\|                 " or
set formatlistpat+=^\\s*[-–+o*•]\\s\\+  " Bullet points

" Set the directory for saving swap files and undo history
if has('win32') || has('win64')
    set directory=e:/temp/vim//
else
    set directory=/var/tmp/daperry/vim//
endif
execute "set undodir=" . &directory
set undofile
silent! call mkdir(&directory, "p", 0700)

" Highlight the current line and column, and column 80
" The colours for these are set below
set cursorline cursorcolumn colorcolumn=80
augroup cursorcoords
    autocmd!
    autocmd WinLeave * set nocursorline nocursorcolumn
    autocmd WinEnter * set cursorline cursorcolumn
augroup END

set pastetoggle=<F9>                " key that toggles paste mode

" Since most of us have Ctrl-S hardwired into our brains
nnoremap <C-S> :wa<CR>
inoremap <C-S> <C-O>:wa<CR>

" Set Ctrl-Backspace to delete word (gui)
inoremap <C-BS> <C-W>
cnoremap <C-BS> <C-W>

" Set Ctrl-Backspace to delete word (tui)
inoremap <C-H> <C-W>
cnoremap <C-H> <C-W>

" Allow Ctrl-W to be something else
inoremap <C-W> <Nop>
cnoremap <C-W> <Nop>

" Use Shift-Insert to paste the clipboard at the current location
inoremap <S-Insert> <C-O>:set paste<CR><C-R>*<C-O>:set nopaste<CR>
cnoremap <S-Insert> <C-R>*

" Don't let 'x' wipe out the delete register
nnoremap x "_x

" Move through visual lines rather than physical lines
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

set number
"set relativenumber
"set numberwidth=2

" Show non-printable pseudocharacters
set list
" Fallback symbols if vim has trouble with UTF-8
set listchars=tab:>-,trail:-,extends:>,precedes:<
" The real symbols I want
silent! set listchars=tab:␉·,trail:·,extends:⏵,precedes:⏴,nbsp:␣

if (&term == 'xterm' || &term =~? '^screen')
    set t_Co=256
endif

"set background=dark
"colorscheme desert256
"colorscheme asu1dark
"colorscheme solarized
"colorscheme apprentice
"colorscheme base16-eighties
colorscheme koehler

" Set colour customizations *after* setting colorscheme
"highlight CursorLine   term=none cterm=none ctermbg=238 guibg=#222222
highlight CursorLine NONE
highlight CursorColumn term=none cterm=none ctermbg=238 guibg=#222222
highlight ColorColumn  term=none cterm=none ctermbg=235 guibg=#0F0F0F
highlight LineNr       term=underline cterm=none ctermfg=3 ctermbg=0 guifg=Yellow guibg=Black
highlight CursorLineNr term=inverse cterm=none ctermfg=0 ctermbg=11 guifg=#000000 guibg=#FFFF00
" CursorLineNr applies to the current line number only if relativenumber
" is set, or if number AND cursorline are both set. cursorline and
" relativenumber both slow vim down. Hopefully, "highlight CursorLine NONE"
" mitigates that somewhat.

highlight DiffDelete   term=none cterm=none ctermfg=0 ctermbg=52 guifg=black guibg=#5F0000
highlight DiffAdd      term=none cterm=none ctermbg=22 guibg=#005F00
highlight DiffChange   term=none cterm=none ctermbg=17 guibg=#00005F
highlight DiffText     term=underline cterm=underline ctermbg=20 guibg=#0000D7

" Buffer management
set hidden " lets you switch away from unsaved buffers
" List buffers and let you choose one
nnoremap <leader>b :ls<cr>:b<space>

" Seen this suggested a few places
set wildmenu wildmode=full

" This lets us write plugins in perl, but really slows down vim's startup
"let home=expand('~')
"let $PERL5LIB=home."/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:".home."/perl5/lib/perl5"
"perl use Vim::X;
"perl Vim::X::source_function_dir("~/.vim/perl");

augroup quickfix
    autocmd!
    autocmd QuickFixCmdPost [^l]* cwindow
augroup END

" auto-complete options; see :help ins-completion
" see also https://vimways.org/2018/you-should-be-using-tags-in-vim/
" see also https://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set complete=.,t,i
set completeopt=menuone,preview
" autocomplete from tag
inoremap <C-]> <C-X><C-]>
" autocomplete from keywords in the current and included files
inoremap <C-N> <C-X><C-I>
" autocomplete from definitions/macros
inoremap <C-D> <C-X><C-D>
" when the popup completion menu is showing, let Enter select the current
" option
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
